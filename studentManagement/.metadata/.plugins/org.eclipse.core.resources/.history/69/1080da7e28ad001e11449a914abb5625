package com.app.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.dto.StudentProfileDTO;
import com.app.entity.Student;
import com.app.service.StudentService;

@RestController
@RequestMapping("/students")
public class StudentController {
	
	@Autowired
    private StudentService studentService;

    @PostMapping("/admit")
    public ResponseEntity<Student> admitStudent(@RequestBody Student student) {
        Student admittedStudent = studentService.admitStudent(student);
        return ResponseEntity.ok(admittedStudent);
    }

    @GetMapping("/byCourse/{courseId}")
    public ResponseEntity<List<Student>> getStudentsByCourse(@PathVariable Long courseId) {
        List<Student> students = studentService.getStudentsByCourse(courseId);
        return ResponseEntity.ok(students);
    }

    @PutMapping("/updateProfile/{studentId}")
    public ResponseEntity<Student> updateStudentProfile(
            @PathVariable Long studentId,
            @RequestBody StudentProfileDTO studentDTO) {
        Student updatedStudent = studentService.updateStudentProfile(studentId, studentDTO);
        if (updatedStudent != null) {
            return ResponseEntity.ok(updatedStudent);
        } else {
            
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/leaveCourse/{studentId}/{courseId}")
    public ResponseEntity<Void> leaveCourse(
            @PathVariable Long studentId,
            @PathVariable Long courseId) {
        studentService.leaveCourse(studentId, courseId);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/byName/{name}")
    public ResponseEntity<List<Student>> getStudentsByName(@PathVariable String name) {
        List<Student> students = studentService.getStudentsByName(name);
        return ResponseEntity.ok(students);
    }

}
