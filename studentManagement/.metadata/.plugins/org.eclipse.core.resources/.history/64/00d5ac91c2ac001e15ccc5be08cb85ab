package com.app.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.app.dto.StudentProfileDTO;
import com.app.entity.Course;
import com.app.entity.Student;
import com.app.repository.CourseRepository;
import com.app.repository.StudentRepository;

@Service
public class StudentServiceImpl implements StudentService {

    @Autowired
    private StudentRepository studentRepository;

    @Autowired
    private CourseRepository courseRepository;

    @Override
    public Student admitStudent(Student student) {
        return studentRepository.save(student);
    }

    @Override
    public List<Student> getStudentsByCourse(Long courseId) {
        return studentRepository.findByCourses_Id(courseId);
    }

    @Override
    public Student updateStudentProfile(Long studentId, StudentProfileDTO studentDTO) {
        Optional<Student> optionalStudent = studentRepository.findById(studentId);
        if (optionalStudent.isPresent()) {
            Student student = optionalStudent.get();

            if (studentDTO.getParentsName() != null) {
                student.setName(studentDTO.getParentsName());
            }
            // Assuming setAddress expects a String, change this accordingly
            if (studentDTO.getAddress() != null) {
                student.setAddress(studentDTO.getAddress());
            }

            return studentRepository.save(student);
        }
        return null; // or throw an exception
    }

    @Override
    public void leaveCourse(Long studentId, Long courseId) {
        Optional<Student> optionalStudent = studentRepository.findById(studentId);
        Optional<Course> optionalCourse = courseRepository.findById(courseId);

        if (optionalStudent.isPresent() && optionalCourse.isPresent()) {
            Student student = optionalStudent.get();
            Course course = optionalCourse.get();
            student.getCourses().remove(course);
            studentRepository.save(student);
        }
    }

    @SuppressWarnings("unchecked")
	@Override
    public List<Student> getStudentsByName(String name) {
        return (List<Student>) studentRepository.findByName(name).orElse(null);
    }
}
